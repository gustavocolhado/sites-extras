'use client'

import { useState, useRef, useEffect } from 'react'
import Hls from 'hls.js'

interface PlayerProps {
  videoUrl: string
  poster?: string
  title?: string
  onError?: (error: string) => void
  onLoad?: () => void
  autoPlay?: boolean
  muted?: boolean
  loop?: boolean
  controls?: boolean
  preload?: 'auto' | 'metadata' | 'none'
}

export default function VideoJSPlayer({ 
  videoUrl, 
  poster, 
  title, 
  onError, 
  onLoad, 
  autoPlay = false, 
  muted = false, 
  loop = false,
  controls = true,
  preload = 'auto'
}: PlayerProps) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const hlsRef = useRef<Hls | null>(null)
  const onLoadCalledRef = useRef<boolean>(false)
  const lastVideoUrlRef = useRef<string>('')
  const [isLoading, setIsLoading] = useState(false) // Mantido para l√≥gica interna, mas n√£o usado no UI
  const [error, setError] = useState<string | null>(null)

  // Fun√ß√£o para obter URL do v√≠deo
  const getVideoUrl = (url: string) => {
    if (!url) {
      console.warn('üé¨ Player: URL do v√≠deo est√° vazia')
      return ''
    }
    
    console.log('üé¨ Player: URL original:', url)
    
    // Validar se a URL √© v√°lida
    try {
      new URL(url)
      console.log('‚úÖ Player: URL v√°lida detectada')
    } catch (e) {
      console.warn('‚ö†Ô∏è Player: URL inv√°lida, tentando corrigir:', url)
    }
    
    // Corrigir URL com duplica√ß√£o de dom√≠nio
    let correctedUrl = url
    if (url.includes('https://') && url.split('https://').length > 2) {
      // Encontrar a segunda ocorr√™ncia de https://
      const parts = url.split('https://')
      if (parts.length >= 3) {
        // Pegar apenas a parte ap√≥s o segundo https://
        correctedUrl = 'https://' + parts.slice(2).join('https://')
        console.log('üé¨ Player: URL corrigida (duplica√ß√£o de dom√≠nio):', correctedUrl)
      }
    }
    
    // Se a URL j√° √© completa (come√ßa com http), retornar como est√°
    if (correctedUrl.startsWith('http://') || correctedUrl.startsWith('https://')) {
      console.log('üé¨ Player: URL completa detectada:', correctedUrl)
      return correctedUrl
    }
    
    const mediaUrl = process.env.NEXT_PUBLIC_MEDIA_URL
    console.log('üé¨ Player: NEXT_PUBLIC_MEDIA_URL:', mediaUrl)
    
    if (!mediaUrl) {
      console.warn('üé¨ Player: NEXT_PUBLIC_MEDIA_URL n√£o est√° configurada, usando URL como est√°')
      return correctedUrl
    }
    
    // Remove barra dupla se existir
    const cleanMediaUrl = mediaUrl.endsWith('/') ? mediaUrl.slice(0, -1) : mediaUrl
    const cleanVideoUrl = correctedUrl.startsWith('/') ? correctedUrl : `/${correctedUrl}`
    const finalUrl = `${cleanMediaUrl}${cleanVideoUrl}`
    
    console.log('üé¨ Player: URL final constru√≠da:', finalUrl)
    return finalUrl
  }

  // Fun√ß√£o para obter URL do poster
  const getPosterUrl = (url: string) => {
    if (!url) return ''
    
    // Corrigir URL com duplica√ß√£o de dom√≠nio
    let correctedUrl = url
    if (url.includes('https://') && url.split('https://').length > 2) {
      // Encontrar a segunda ocorr√™ncia de https://
      const parts = url.split('https://')
      if (parts.length >= 3) {
        // Pegar apenas a parte ap√≥s o segundo https://
        correctedUrl = 'https://' + parts.slice(2).join('https://')
        console.log('üé¨ Player: Poster URL corrigida:', correctedUrl)
      }
    }
    
    // Se a URL j√° √© completa (come√ßa com http), retornar como est√°
    if (correctedUrl.startsWith('http://') || correctedUrl.startsWith('https://')) {
      return correctedUrl
    }
    
    const mediaUrl = process.env.NEXT_PUBLIC_MEDIA_URL
    if (!mediaUrl) {
      return correctedUrl
    }
    
    // Remove barra dupla se existir
    const cleanMediaUrl = mediaUrl.endsWith('/') ? mediaUrl.slice(0, -1) : mediaUrl
    const cleanPosterUrl = correctedUrl.startsWith('/') ? correctedUrl : `/${correctedUrl}`
    
    return `${cleanMediaUrl}${cleanPosterUrl}`
  }

  // Fun√ß√£o para detectar o tipo de v√≠deo
  const getVideoType = (url: string) => {
    if (!url) return 'video/mp4'
    
    // Verificar se √© uma URL de embed
    if (url.includes('/embed/') || url.includes('embed')) {
      console.log('üé¨ Player: URL de embed detectada, usando iframe')
      return 'iframe'
    }
    
    const extension = url.split('.').pop()?.toLowerCase()
    console.log('üé¨ Player: Extens√£o detectada:', extension)
    
    switch (extension) {
      case 'm3u8':
      case 'm3u':
        return 'application/x-mpegURL'
      case 'mp4':
        return 'video/mp4'
      case 'webm':
        return 'video/webm'
      case 'ogg':
        return 'video/ogg'
      default:
        return 'video/mp4'
    }
  }


  // Fun√ß√£o para chamar onLoad apenas uma vez
  const callOnLoadOnce = () => {
    if (!onLoadCalledRef.current) {
      onLoadCalledRef.current = true
      console.log('üé¨ Player: Chamando onLoad (primeira vez)')
      onLoad?.()
    } else {
      console.log('üé¨ Player: onLoad j√° foi chamado, ignorando')
    }
  }

  // Inicializar o player HLS
  useEffect(() => {
    const video = videoRef.current
    if (!video) {
      console.warn('üé¨ Player: Elemento video n√£o encontrado')
      return
    }

    if (!videoUrl) {
      console.warn('üé¨ Player: URL do v√≠deo n√£o fornecida')
      setError('URL do v√≠deo n√£o fornecida')
      return
    }

    // Verificar se √© a mesma URL (evitar re-inicializa√ß√£o desnecess√°ria)
    if (lastVideoUrlRef.current === videoUrl) {
      console.log('üé¨ Player: Mesma URL, evitando re-inicializa√ß√£o')
      return
    }
    
    // Reset flag de onLoad para nova inicializa√ß√£o
    onLoadCalledRef.current = false
    lastVideoUrlRef.current = videoUrl
    console.log('üé¨ Player: Resetando flag onLoad para nova inicializa√ß√£o')

    const finalVideoUrl = getVideoUrl(videoUrl)
    const finalPosterUrl = poster ? getPosterUrl(poster) : ''
    const videoType = getVideoType(finalVideoUrl)
    
    // Detectar iOS
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
    if (isIOS) {
      console.log('üçé Player: iOS detectado, carregando v√≠deo original')
      console.log('üçé Player: iOS Info:', {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        vendor: navigator.vendor,
        finalVideoUrl,
        videoType,
        isHTTPS: finalVideoUrl.startsWith('https://'),
        hasMediaURL: !!process.env.NEXT_PUBLIC_MEDIA_URL,
        currentDomain: window.location.hostname,
        isSameDomain: finalVideoUrl.includes(window.location.hostname)
      })
      
      // Teste de conectividade para iOS
      if (finalVideoUrl.startsWith('http')) {
        console.log('üçé Player: Testando conectividade com a URL do v√≠deo...')
        fetch(finalVideoUrl, { method: 'HEAD' })
          .then(response => {
            console.log('üçé Player: Teste de conectividade:', {
              status: response.status,
              statusText: response.statusText,
              headers: Object.fromEntries(response.headers.entries())
            })
          })
          .catch(error => {
            console.error('üçé Player: Erro no teste de conectividade:', error)
          })
      }
    }

    // Timeout removido - n√£o h√° mais loading visual

    console.log('üé¨ Player: Inicializando com:', {
      originalUrl: videoUrl,
      finalVideoUrl,
      finalPosterUrl,
      videoType,
      autoPlay,
      muted,
      controls,
      isIOS,
      userAgent: navigator.userAgent
    })

    // Detectar qualidade da conex√£o e ajustar preload
    const connection = (navigator as any).connection
    let optimizedPreload = preload
    
    if (connection) {
      console.log('üåê Player: Qualidade da conex√£o detectada:', connection.effectiveType)
      if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
        optimizedPreload = 'metadata'
        console.log('üêå Player: Conex√£o lenta detectada, usando preload metadata')
      } else if (connection.effectiveType === '3g') {
        optimizedPreload = 'metadata'
        console.log('üì± Player: Conex√£o 3G detectada, usando preload metadata')
      } else {
        optimizedPreload = 'auto'
        console.log('üöÄ Player: Conex√£o r√°pida detectada, usando preload auto')
      }
    }

    // Configurar atributos do v√≠deo com otimiza√ß√µes
    console.log('üé¨ Player: Configurando atributos do v√≠deo:', {
      poster: finalPosterUrl,
      autoplay: autoPlay,
      muted: muted,
      loop: loop,
      controls: controls,
      preload: optimizedPreload
    })
    
    video.poster = finalPosterUrl
    video.autoplay = autoPlay
    video.muted = muted
    video.loop = loop
    video.controls = controls
    video.preload = optimizedPreload
    
    // Sempre come√ßar sem loading visual
    setIsLoading(false)
    console.log('üé¨ Player: Iniciando sem loading visual - v√≠deo carrega direto')
    
    // Otimiza√ß√µes de performance e compatibilidade iOS
    video.playsInline = true
    video.disablePictureInPicture = false
    
    // Configurar CORS baseado na URL
    if (finalVideoUrl.startsWith('https://') && !finalVideoUrl.includes(window.location.hostname)) {
      video.crossOrigin = 'anonymous'
      console.log('üçé Player: Configurando CORS para URL externa')
    } else {
      video.crossOrigin = null
      console.log('üçé Player: Removendo CORS para URL local')
    }
    
    // Configura√ß√µes espec√≠ficas para iOS/Safari
    video.setAttribute('webkit-playsinline', 'true')
    video.setAttribute('playsinline', 'true')
    video.setAttribute('x-webkit-airplay', 'allow')
    
    // Para iOS, usar preload mais conservador se conex√£o for lenta
    if (isIOS && connection && (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g')) {
      video.preload = 'none'
      console.log('üçé Player: iOS detectado com conex√£o lenta, usando preload none')
    }
    
    // Configurar qualidade adaptativa se dispon√≠vel
    if ('requestVideoFrameCallback' in video) {
      video.requestVideoFrameCallback(() => {
        // Otimizar qualidade baseada na conex√£o
        const connection = (navigator as any).connection
        if (connection && connection.effectiveType === 'slow-2g') {
          video.playbackRate = 0.75
        }
      })
    }

    // Limpar inst√¢ncia anterior do HLS
    if (hlsRef.current) {
      hlsRef.current.destroy()
      hlsRef.current = null
    }

    // Verificar se √© iframe
    if (videoType === 'iframe') {
      console.log('üé¨ Player: Usando iframe para embed')
      setIsLoading(false)
      callOnLoadOnce()
      return
    }
    
    // Verificar se √© HLS
    if (videoType === 'application/x-mpegURL') {
      console.log('üé¨ Player: Detectado HLS, verificando suporte...')
      
      // Verificar se o navegador suporta HLS nativamente
      if (video.canPlayType('application/vnd.apple.mpegurl')) {
        console.log('üé¨ Player: Usando HLS nativo do navegador')
        console.log('üé¨ Player: Definindo src do v√≠deo:', finalVideoUrl)
        video.src = finalVideoUrl
      } else if (Hls.isSupported()) {
        console.log('üé¨ Player: Usando hls.js')
        
        // Criar nova inst√¢ncia do HLS
        const hls = new Hls({
          enableWorker: true,
          lowLatencyMode: true,
          backBufferLength: 90
        })

        hlsRef.current = hls

        // Carregar a fonte
        hls.loadSource(finalVideoUrl)
        hls.attachMedia(video)

        // Eventos do HLS
        hls.on(Hls.Events.MANIFEST_PARSED, () => {
          console.log('‚úÖ Player: Manifesto HLS carregado')
          setIsLoading(false)
          callOnLoadOnce()
        })

        hls.on(Hls.Events.ERROR, (event, data) => {
          console.error('‚ùå Player: Erro HLS:', data)
          if (data.fatal) {
            switch (data.type) {
              case Hls.ErrorTypes.NETWORK_ERROR:
                console.log('‚ùå Player: Erro de rede fatal, tentando recuperar...')
                hls.startLoad()
                break
              case Hls.ErrorTypes.MEDIA_ERROR:
                console.log('‚ùå Player: Erro de m√≠dia fatal, tentando recuperar...')
                hls.recoverMediaError()
                break
              default:
                console.log('‚ùå Player: Erro fatal n√£o recuper√°vel')
                setError('Erro ao carregar o v√≠deo HLS')
                onError?.('Erro ao carregar o v√≠deo HLS')
                setIsLoading(false)
                break
            }
          }
        })

        hls.on(Hls.Events.MANIFEST_LOADING, () => {
          console.log('üîÑ Player: Carregando manifesto HLS...')
          setIsLoading(true)
          setError(null)
        })

        hls.on(Hls.Events.LEVEL_LOADED, () => {
          console.log('‚úÖ Player: N√≠vel HLS carregado')
          setIsLoading(false)
        })
      } else {
        console.error('‚ùå Player: HLS n√£o suportado neste navegador')
        setError('Seu navegador n√£o suporta reprodu√ß√£o de v√≠deo HLS')
        onError?.('Seu navegador n√£o suporta reprodu√ß√£o de v√≠deo HLS')
        setIsLoading(false)
      }
    } else {
      // V√≠deo normal (MP4, WebM, etc.)
      console.log('üé¨ Player: Usando v√≠deo normal:', videoType)
      
      // Verificar suporte de formato no iOS
      if (isIOS) {
        const canPlay = video.canPlayType(videoType)
        console.log('üçé Player: Suporte de formato no iOS:', {
          videoType,
          canPlay,
          supportLevel: canPlay === 'probably' ? 'Excelente' : canPlay === 'maybe' ? 'Poss√≠vel' : 'N√£o suportado'
        })
        
        if (!canPlay) {
          console.error('üçé Player: Formato n√£o suportado no iOS:', videoType)
        }
      }
      
      console.log('üé¨ Player: Definindo src do v√≠deo:', finalVideoUrl)
      video.src = finalVideoUrl
    }

         // Eventos do v√≠deo
     const handleLoadStart = () => {
       console.log('üîÑ Player: Iniciando carregamento', {
         videoSrc: video.src,
         videoCurrentSrc: video.currentSrc,
         videoNetworkState: video.networkState,
         videoReadyState: video.readyState
       })
       setIsLoading(true)
       setError(null)
       
       // Para iOS, remover loading mais rapidamente
       if (isIOS) {
         setTimeout(() => {
           if (video.readyState >= 1) { // HAVE_METADATA
             console.log('üçé Player: iOS - Removendo loading ap√≥s loadstart')
             setIsLoading(false)
           }
         }, 500) // 500ms ap√≥s loadstart
       }
     }

     const handleLoadedMetadata = () => {
       console.log('‚úÖ Player: Metadados carregados')
       setIsLoading(false)
       callOnLoadOnce()
     }

     const handleCanPlay = () => {
       console.log('‚úÖ Player: V√≠deo pode ser reproduzido')
       setIsLoading(false)
       callOnLoadOnce() // Chamar onLoad tamb√©m aqui para garantir
     }

     const handleCanPlayThrough = () => {
       console.log('‚úÖ Player: V√≠deo pode ser reproduzido completamente')
       setIsLoading(false)
     }

    const handleLoadedData = () => {
      console.log('‚úÖ Player: Dados carregados')
      setIsLoading(false)
      callOnLoadOnce() // Chamar onLoad tamb√©m aqui
    }

    const handleProgress = () => {
      // Preload inteligente baseado no progresso
      if (video.buffered.length > 0) {
        const bufferedEnd = video.buffered.end(video.buffered.length - 1)
        const currentTime = video.currentTime
        const duration = video.duration
        
        // Calcular percentual carregado
        const bufferedPercent = (bufferedEnd / duration) * 100
        
        // Se temos mais de 50% do v√≠deo carregado, reduzir prioridade
        if (bufferedPercent > 50) {
          video.preload = 'metadata'
          console.log('üìä Player: V√≠deo 50%+ carregado, reduzindo preload para metadata')
        }
        
        // Se temos mais de 30 segundos carregados, reduzir prioridade
        if (bufferedEnd - currentTime > 30) {
          video.preload = 'metadata'
          console.log('üìä Player: 30+ segundos carregados, reduzindo preload para metadata')
        }
      }
    }

    const handleWaiting = () => {
      console.log('üé¨ Player: Buffering...')
      setIsLoading(true)
    }

    const handlePlaying = () => {
      console.log('üé¨ Player: Playing')
      setIsLoading(false)
    }

    const handleError = (e: Event) => {
      console.error('‚ùå Player: Erro no v√≠deo:', e)
      const videoElement = e.target as HTMLVideoElement
      const error = videoElement.error
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
      
      // Log detalhado do erro
      console.error('‚ùå Player: Detalhes do erro:', {
        errorCode: error?.code,
        errorMessage: error?.message,
        videoSrc: videoElement.src,
        videoCurrentSrc: videoElement.currentSrc,
        videoNetworkState: videoElement.networkState,
        videoReadyState: videoElement.readyState,
        isIOS,
        userAgent: navigator.userAgent,
        isHTTPS: videoElement.src.startsWith('https://'),
        hasCORS: videoElement.crossOrigin,
        videoType: videoElement.getAttribute('type') || 'unknown'
      })
      
      // Logs espec√≠ficos para iOS
      if (isIOS) {
        console.error('üçé Player: Erro espec√≠fico do iOS:', {
          errorCode: error?.code,
          possibleCauses: {
            cors: 'Problema de CORS - v√≠deo de dom√≠nio diferente',
            https: 'Problema de HTTPS - v√≠deo n√£o √© HTTPS',
            format: 'Formato n√£o suportado no iOS',
            network: 'Problema de rede ou URL inv√°lida'
          },
          videoSrc: videoElement.src,
          currentDomain: window.location.hostname
        })
      }
      
      let errorMessage = 'Erro ao carregar o v√≠deo'
      if (error) {
        switch (error.code) {
          case 1:
            errorMessage = isIOS ? 'Erro de rede. Verifique sua conex√£o e tente novamente.' : 'Erro de rede ao carregar o v√≠deo'
            break
          case 2:
            errorMessage = isIOS ? 'Formato de v√≠deo n√£o suportado no iOS. Tente em outro dispositivo.' : 'Erro ao decodificar o v√≠deo'
            break
          case 3:
            errorMessage = isIOS ? 'Formato n√£o suportado no iPhone/iPad' : 'Formato de v√≠deo n√£o suportado'
            break
          case 4:
            errorMessage = isIOS ? 'V√≠deo n√£o pode ser reproduzido no iOS' : 'V√≠deo n√£o pode ser reproduzido'
            break
          default:
            errorMessage = error.message || (isIOS ? 'Erro no iOS. Tente atualizar o Safari.' : 'Erro ao carregar o v√≠deo')
        }
      }
      
      // Sem fallback - sempre usar o v√≠deo original
       
       setError(errorMessage)
       onError?.(errorMessage)
       setIsLoading(false)
    }

         video.addEventListener('loadstart', handleLoadStart)
     video.addEventListener('loadedmetadata', handleLoadedMetadata)
     video.addEventListener('loadeddata', handleLoadedData)
     video.addEventListener('canplay', handleCanPlay)
     video.addEventListener('canplaythrough', handleCanPlayThrough)
     video.addEventListener('progress', handleProgress)
     video.addEventListener('waiting', handleWaiting)
     video.addEventListener('playing', handlePlaying)
     video.addEventListener('error', handleError)

         // Cleanup
     return () => {
       console.log('üßπ Player: Limpando eventos e HLS')
       video.removeEventListener('loadstart', handleLoadStart)
       video.removeEventListener('loadedmetadata', handleLoadedMetadata)
       video.removeEventListener('loadeddata', handleLoadedData)
       video.removeEventListener('canplay', handleCanPlay)
       video.removeEventListener('canplaythrough', handleCanPlayThrough)
       video.removeEventListener('progress', handleProgress)
       video.removeEventListener('waiting', handleWaiting)
       video.removeEventListener('playing', handlePlaying)
       video.removeEventListener('error', handleError)
       
       if (hlsRef.current) {
         hlsRef.current.destroy()
         hlsRef.current = null
       }
     }
  }, [videoUrl, poster, autoPlay, muted, loop, controls, preload, onLoad, onError])

  if (error) {
    return (
      <div className="bg-black aspect-video rounded-lg flex items-center justify-center">
        <div className="text-white text-center">
          <div className="text-2xl mb-2">‚ö†Ô∏è</div>
          <div className="text-sm">{error}</div>
          <button 
            onClick={() => {
              console.log('üîÑ Player: Tentando novamente')
              setError(null)
              setIsLoading(true)
              if (videoRef.current) {
                videoRef.current.load()
              }
            }}
            className="mt-4 bg-accent-red hover:bg-accent-red-hover text-white px-4 py-2 rounded-lg transition-colors"
          >
            Tentar Novamente
          </button>
        </div>
      </div>
    )
  }

  // Verificar se deve usar iframe
  const shouldUseIframe = getVideoType(videoUrl) === 'iframe'

  return (
    <div className="relative bg-black aspect-video rounded-lg overflow-hidden">
      {/* Loading Overlay removido - v√≠deo carrega direto */}

      {/* Iframe para embeds */}
      {shouldUseIframe ? (
        <iframe
          src={videoUrl}
          className="w-full h-full"
          frameBorder="0"
          allowFullScreen
          allow="autoplay; fullscreen; picture-in-picture"
          title={title || 'V√≠deo'}
        />
      ) : (
        /* Video Element */
        <video
          ref={videoRef}
          className="w-full h-full"
          playsInline
          webkit-playsinline="true"
          x-webkit-airplay="allow"
          preload="auto"
          controls
        />
      )}
    </div>
  )
}
