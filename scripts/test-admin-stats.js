const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testAdminStats() {
  try {
    console.log('üß™ Testando API de Estat√≠sticas Administrativas...\n')

    // Obter data de hoje (in√≠cio e fim do dia)
    const today = new Date()
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate())
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999)

    console.log('üìÖ Per√≠odo de teste:')
    console.log(`   In√≠cio: ${startOfDay.toISOString()}`)
    console.log(`   Fim: ${endOfDay.toISOString()}\n`)

    // Testar cada consulta individualmente
    console.log('üîç Testando consultas individuais...\n')

    // 1. Usu√°rios cadastrados hoje
    try {
      const usersRegisteredToday = await prisma.user.count({
        where: {
          created_at: {
            gte: startOfDay,
            lte: endOfDay
          }
        }
      })
      console.log(`‚úÖ Usu√°rios cadastrados hoje: ${usersRegisteredToday}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar usu√°rios cadastrados hoje: ${error.message}`)
    }

    // 2. Receita de assinaturas hoje
    try {
      const revenueToday = await prisma.payment.aggregate({
        _sum: {
          amount: true
        },
        where: {
          status: 'completed',
          transactionDate: {
            gte: startOfDay,
            lte: endOfDay
          }
        }
      })
      console.log(`‚úÖ Receita de assinaturas hoje: R$ ${revenueToday._sum.amount || 0}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar receita hoje: ${error.message}`)
    }

    // 3. Usu√°rios ativos que acessaram o site hoje
    try {
      const activeUsersToday = await prisma.user.count({
        where: {
          update_at: {
            gte: startOfDay,
            lte: endOfDay
          }
        }
      })
      console.log(`‚úÖ Usu√°rios ativos hoje: ${activeUsersToday}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar usu√°rios ativos hoje: ${error.message}`)
    }

    // 4. Visualiza√ß√µes de v√≠deos hoje
    try {
      const viewsToday = await prisma.video.aggregate({
        _sum: {
          viewCount: true
        },
        where: {
          updated_at: {
            gte: startOfDay,
            lte: endOfDay
          }
        }
      })
      console.log(`‚úÖ Visualiza√ß√µes de v√≠deos hoje: ${viewsToday._sum.viewCount || 0}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar visualiza√ß√µes hoje: ${error.message}`)
    }

    // Testar consultas gerais
    console.log('\nüìä Testando estat√≠sticas gerais...\n')

    try {
      const totalUsers = await prisma.user.count()
      console.log(`‚úÖ Total de usu√°rios: ${totalUsers}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar total de usu√°rios: ${error.message}`)
    }

    try {
      const totalVideos = await prisma.video.count()
      console.log(`‚úÖ Total de v√≠deos: ${totalVideos}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar total de v√≠deos: ${error.message}`)
    }

    try {
      const totalViews = await prisma.video.aggregate({
        _sum: {
          viewCount: true
        }
      })
      console.log(`‚úÖ Total de visualiza√ß√µes: ${totalViews._sum.viewCount || 0}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar total de visualiza√ß√µes: ${error.message}`)
    }

    try {
      const totalRevenue = await prisma.payment.aggregate({
        _sum: {
          amount: true
        },
        where: {
          status: 'completed'
        }
      })
      console.log(`‚úÖ Receita total: R$ ${totalRevenue._sum.amount || 0}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar receita total: ${error.message}`)
    }

    try {
      const totalLikes = await prisma.userLike.count()
      console.log(`‚úÖ Total de likes: ${totalLikes}`)
    } catch (error) {
      console.log(`‚ùå Erro ao buscar total de likes: ${error.message}`)
    }

    console.log('\nüéâ Teste conclu√≠do!')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAdminStats()
